openapi: 3.0.0
info:
  title: Event Booking API
  description: API for managing users, events, and bookings.
  version: 1.0.0
paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthRegisterResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login a user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthLoginResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      tags: 
        - Users
      summary: Attendees and hosts can only retrieve their own details
      operationId: getUsers
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/{userId}:
    patch:
      tags: 
        - Users
      summary: Update a user
      operationId: updateUser
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  example: Updated Name
                email:
                  type: string
                  format: email
                  pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
                  example: updated.email@example.com
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    delete:
      tags: 
        - Users
      summary: Delete a user
      operationId: deleteUser
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
  /events:
    post:
      tags: 
        - Events
      summary: Create a new event
      operationId: createEvent
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventRequest'
      responses:
        '201':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    get:
      tags: 
        - Events
      summary: Retrieve all events
      operationId: getEvents
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
  /events/{eventId}:
    get:
      tags: 
        - Events
      summary: Retrieve an event by ID
      operationId: getEventById
      parameters:
        - in: path
          name: eventId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Event retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
    patch:
      tags: 
        - Events
      summary: Update an event
      operationId: updateEvent
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication
        - in: path
          name: eventId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                title:
                  type: string
                description:
                  type: string
                startDateTime:
                  type: string
                  format: date-time
                endDateTime:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Event updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
  /bookings:
    post:
      tags: 
        - Bookings
      summary: Create a booking
      operationId: createBooking
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookingRequest'
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags: 
        - Bookings
      summary: Retrieve all bookings
      operationId: getBookings
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication
      responses:
        '200':
          description: List of bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnrichedBookingResponse'
components:
  schemas:
    AuthRegisterRequest:
      type: object
      required:
        - name
        - email
        - password
        - role
      additionalProperties: false
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
          example: john.doe@example.com
        password:
          type: string
          minLength: 8
          maxLength: 50
          pattern: '^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d@$!%*?&]{8,}$'
          example: MySecurePass123
        role:
          type: string
          enum: [host, attendee]
          example: host
    AuthRegisterResponse:
      type: object
      required:
        - user
        - token
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
    AuthLoginRequest:
      type: object
      required:
        - email
        - password
      additionalProperties: false
      properties:
        email:
          type: string
          format: email
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
          example: john.doe@example.com
        password:
          type: string
          example: MySecurePass123
    AuthLoginResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
    User:
      type: object
      required:
        - userId
        - name
        - email
        - role
        - createdAt
        - updatedAt
      properties:
        userId:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [host, attendee]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CreateEventRequest:
      type: object
      required:
        - title
        - startDateTime
        - endDateTime
        - capacity
      additionalProperties: false
      properties:
        title:
          type: string
        description:
          type: string
        startDateTime:
          type: string
          format: date-time
        endDateTime:
          type: string
          format: date-time
        capacity:
          type: integer
          minimum: 1
    Event:
      type: object
      required:
        - eventId
        - title
        - startDateTime
        - endDateTime
        - hostId
        - capacity
        - numberOfAttendees
        - createdAt
        - updatedAt
      properties:
        eventId:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        startDateTime:
          type: string
          format: date-time
        endDateTime:
          type: string
          format: date-time
        hostId:
          type: string
          format: uuid
        capacity:
          type: integer
          minimum: 1
          example: 100
        numberOfAttendees:
          type: integer
          minimum: 0
          readOnly: true
          example: 25
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CreateBookingRequest:
      type: object
      additionalProperties: false
      required:
        - eventId
      properties:
        eventId:
          type: string
          format: uuid
    Booking:
      type: object
      required:
        - bookingId
        - userId
        - eventId
        - createdAt
        - updatedAt
      properties:
        bookingId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        eventId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    EnrichedBookingResponse:
      type: object
      required:
        - bookingId
        - userId
        - eventId
        - createdAt
        - updatedAt
        - event
      properties:
        bookingId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        eventId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        event:
          $ref: '#/components/schemas/Event'
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: 'Invalid credentials'
