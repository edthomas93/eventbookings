openapi: 3.0.0
info:
  title: Event Booking API
  description: API for managing users, events, and bookings.
  version: 1.0.0
paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login a user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad Request (e.g., invalid credentials)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      tags: 
        - Users
      summary: Retrieve all users
      operationId: getUsers
      parameters:
        - in: query
          name: role
          schema:
            type: string
            enum: [host, attendee]
          description: Filter users by role
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
          description: Number of users to return
        - in: query
          name: offset
          schema:
            type: integer
            example: 0
          description: Offset for pagination
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      tags: 
        - Users
      summary: Retrieve a user by ID
      operationId: getUserById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    patch:
      tags: 
        - Users
      summary: Update a user
      operationId: updateUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Updated Name
                email:
                  type: string
                  format: email
                  pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
                  example: updated.email@example.com
                role:
                  type: string
                  enum: [host, attendee]
                  example: attendee
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    delete:
      tags: 
        - Users
      summary: Delete a user
      operationId: deleteUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
  /events:
    post:
      tags: 
        - Events
      summary: Create a new event
      operationId: createEvent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '201':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags: 
        - Events
      summary: Retrieve all events
      operationId: getEvents
      parameters:
        - in: query
          name: hostId
          schema:
            type: string
          description: Filter events by host ID
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
          description: Number of events to return
        - in: query
          name: offset
          schema:
            type: integer
            example: 0
          description: Offset for pagination
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
  /events/{id}:
    get:
      tags: 
        - Events
      summary: Retrieve an event by ID
      operationId: getEventById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Event retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
    patch:
      tags: 
        - Events
      summary: Update an event
      operationId: updateEvent
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                startDateTime:
                  type: string
                  format: date-time
                endDateTime:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Event updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
  /bookings:
    post:
      tags: 
        - Bookings
      summary: Create a booking
      operationId: createBooking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags: 
        - Bookings
      summary: Retrieve all bookings
      operationId: getBookings
      responses:
        '200':
          description: List of bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
components:
  schemas:
    AuthRegisterRequest:
      type: object
      required:
        - name
        - email
        - password
        - role
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
          example: john.doe@example.com
        password:
          type: string
          format: password
          minLength: 8
          example: mySecurePassword123
        role:
          type: string
          enum: [host, attendee]
          example: host
    AuthLoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
          example: john.doe@example.com
        password:
          type: string
          format: password
          example: mySecurePassword123
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [host, attendee]
    Event:
      type: object
      required:
        - id
        - title
        - startDateTime
        - endDateTime
        - hostId
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        startDateTime:
          type: string
          format: date-time
        endDateTime:
          type: string
          format: date-time
        hostId:
          type: string
    Booking:
      type: object
      required:
        - id
        - userId
        - eventId
      properties:
        id:
          type: string
        userId:
          type: string
        eventId:
          type: string
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: 'Invalid credentials'
